//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Labas\Desktop\Cmatch aruno\CMatch\CMatch\Content\CMatch.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CMatch.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CMatchParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, BOOL_OP=47, INTEGER=48, TOUPLE=49, DOUBLE=50, STRING=51, BOOL=52, 
		NULL=53, POSITIVE=54, WS=55, IDENTIFIER=56;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_statementif = 3, 
		RULE_statmentelseif = 4, RULE_statementfor = 5, RULE_statmentmatch = 6, 
		RULE_identifierPattern = 7, RULE_primaryPattern = 8, RULE_pattern = 9, 
		RULE_assigment = 10, RULE_functionCall = 11, RULE_functionalCall = 12, 
		RULE_expressionList = 13, RULE_functionDeclare = 14, RULE_parameterList = 15, 
		RULE_returnStatement = 16, RULE_expression = 17, RULE_multOp = 18, RULE_addOp = 19, 
		RULE_compareOp = 20, RULE_boolOp = 21, RULE_constant = 22, RULE_block = 23, 
		RULE_constantPattern = 24, RULE_decimalNumbersTail = 25, RULE_decimalNumbersHead = 26, 
		RULE_touplePattern = 27, RULE_wildcardPattern = 28;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "statementif", "statmentelseif", "statementfor", 
		"statmentmatch", "identifierPattern", "primaryPattern", "pattern", "assigment", 
		"functionCall", "functionalCall", "expressionList", "functionDeclare", 
		"parameterList", "returnStatement", "expression", "multOp", "addOp", "compareOp", 
		"boolOp", "constant", "block", "constantPattern", "decimalNumbersTail", 
		"decimalNumbersHead", "touplePattern", "wildcardPattern"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'if'", "'('", "')'", "'or'", "'for'", "'{'", "'}'", "'match'", 
		"'case'", "':'", "'when'", "'='", "','", "'func'", "'return'", "'!'", 
		"'*'", "'/'", "'%'", "'+'", "'-'", "'=='", "'!='", "'>'", "'<'", "'>='", 
		"'<='", "'constint'", "'conststring'", "'constdouble'", "'constbool'", 
		"'#.'", "'##.'", "'###.'", "'####.'", "'-#.'", "'-##.'", "'-###.'", "'-####.'", 
		"'.#'", "'.##'", "'.###'", "'.####'", "'#'", "'_'", null, null, null, 
		null, null, null, "'Null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "BOOL_OP", 
		"INTEGER", "TOUPLE", "DOUBLE", "STRING", "BOOL", "NULL", "POSITIVE", "WS", 
		"IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CMatch.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CMatchParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CMatchParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__5) | (1L << T__8) | (1L << T__14) | (1L << T__15) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 58; line();
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 64; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementifContext statementif() {
			return GetRuleContext<StatementifContext>(0);
		}
		public StatementforContext statementfor() {
			return GetRuleContext<StatementforContext>(0);
		}
		public StatmentmatchContext statmentmatch() {
			return GetRuleContext<StatmentmatchContext>(0);
		}
		public FunctionDeclareContext functionDeclare() {
			return GetRuleContext<FunctionDeclareContext>(0);
		}
		public FunctionalCallContext functionalCall() {
			return GetRuleContext<FunctionalCallContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 73;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; statementif();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; statementfor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69; statmentmatch();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70; functionDeclare();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 71; functionalCall();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 72; returnStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssigmentContext assigment() {
			return GetRuleContext<AssigmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 75; assigment();
				}
				break;

			case 2:
				{
				State = 76; functionCall();
				}
				break;
			}
			State = 79; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementifContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatmentelseifContext statmentelseif() {
			return GetRuleContext<StatmentelseifContext>(0);
		}
		public StatementifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementif; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterStatementif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitStatementif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementifContext statementif() {
		StatementifContext _localctx = new StatementifContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statementif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(T__1);
			State = 82; Match(T__2);
			State = 83; expression(0);
			State = 84; Match(T__3);
			State = 85; block();
			State = 88;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 86; Match(T__4);
				State = 87; statmentelseif();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatmentelseifContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementifContext statementif() {
			return GetRuleContext<StatementifContext>(0);
		}
		public StatmentelseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statmentelseif; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterStatmentelseif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitStatmentelseif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatmentelseif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatmentelseifContext statmentelseif() {
		StatmentelseifContext _localctx = new StatmentelseifContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_statmentelseif);
		try {
			State = 92;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; block();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91; statementif();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementforContext : ParserRuleContext {
		public AssigmentContext[] assigment() {
			return GetRuleContexts<AssigmentContext>();
		}
		public AssigmentContext assigment(int i) {
			return GetRuleContext<AssigmentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementforContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementfor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterStatementfor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitStatementfor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementfor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementforContext statementfor() {
		StatementforContext _localctx = new StatementforContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_statementfor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(T__5);
			State = 95; Match(T__2);
			State = 96; assigment();
			State = 97; Match(T__0);
			State = 98; expression(0);
			State = 99; Match(T__0);
			State = 100; assigment();
			State = 101; Match(T__3);
			State = 102; Match(T__6);
			State = 103; block();
			State = 104; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatmentmatchContext : ParserRuleContext {
		public IdentifierPatternContext identifierPattern() {
			return GetRuleContext<IdentifierPatternContext>(0);
		}
		public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public StatmentmatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statmentmatch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterStatmentmatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitStatmentmatch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatmentmatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatmentmatchContext statmentmatch() {
		StatmentmatchContext _localctx = new StatmentmatchContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statmentmatch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(T__8);
			State = 107; Match(T__2);
			State = 108; identifierPattern();
			State = 109; Match(T__3);
			State = 110; Match(T__6);
			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 111; Match(T__9);
				State = 112; pattern();
				State = 113; Match(T__10);
				State = 114; Match(T__6);
				State = 115; block();
				State = 116; Match(T__7);
				}
				}
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__9 );
			State = 122; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierPatternContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CMatchParser.IDENTIFIER, 0); }
		public IdentifierPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterIdentifierPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitIdentifierPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierPatternContext identifierPattern() {
		IdentifierPatternContext _localctx = new IdentifierPatternContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_identifierPattern);
		try {
			State = 126;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
			case TOUPLE:
			case DOUBLE:
			case STRING:
			case BOOL:
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; constant();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryPatternContext : ParserRuleContext {
		public DecimalNumbersHeadContext decimalNumbersHead() {
			return GetRuleContext<DecimalNumbersHeadContext>(0);
		}
		public DecimalNumbersTailContext decimalNumbersTail() {
			return GetRuleContext<DecimalNumbersTailContext>(0);
		}
		public TouplePatternContext touplePattern() {
			return GetRuleContext<TouplePatternContext>(0);
		}
		public ConstantPatternContext constantPattern() {
			return GetRuleContext<ConstantPatternContext>(0);
		}
		public WildcardPatternContext wildcardPattern() {
			return GetRuleContext<WildcardPatternContext>(0);
		}
		public PrimaryPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterPrimaryPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitPrimaryPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryPatternContext primaryPattern() {
		PrimaryPatternContext _localctx = new PrimaryPatternContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_primaryPattern);
		try {
			State = 133;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; decimalNumbersHead();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; decimalNumbersTail();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130; touplePattern();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131; constantPattern();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 132; wildcardPattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		public PrimaryPatternContext primaryPattern() {
			return GetRuleContext<PrimaryPatternContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; primaryPattern();
			State = 138;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__11) {
				{
				State = 136; Match(T__11);
				State = 137; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssigmentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CMatchParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssigmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assigment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterAssigment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitAssigment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssigment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssigmentContext assigment() {
		AssigmentContext _localctx = new AssigmentContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_assigment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(IDENTIFIER);
			State = 141; Match(T__12);
			State = 142; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CMatchParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(IDENTIFIER);
			State = 145; Match(T__2);
			State = 154;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__8) | (1L << T__16) | (1L << INTEGER) | (1L << TOUPLE) | (1L << DOUBLE) | (1L << STRING) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 146; expression(0);
				State = 151;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__13) {
					{
					{
					State = 147; Match(T__13);
					State = 148; expression(0);
					}
					}
					State = 153;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 156; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CMatchParser.IDENTIFIER, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionalCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterFunctionalCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitFunctionalCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalCallContext functionalCall() {
		FunctionalCallContext _localctx = new FunctionalCallContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_functionalCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(IDENTIFIER);
			State = 159; Match(T__2);
			State = 161;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__8) | (1L << T__16) | (1L << INTEGER) | (1L << TOUPLE) | (1L << DOUBLE) | (1L << STRING) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 160; expressionList();
				}
			}

			State = 163; Match(T__3);
			State = 164; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; expression(0);
			State = 171;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__13) {
				{
				{
				State = 167; Match(T__13);
				State = 168; expression(0);
				}
				}
				State = 173;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclareContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CMatchParser.IDENTIFIER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterFunctionDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitFunctionDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclareContext functionDeclare() {
		FunctionDeclareContext _localctx = new FunctionDeclareContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_functionDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(T__14);
			State = 175; Match(IDENTIFIER);
			State = 176; Match(T__2);
			State = 178;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 177; parameterList();
				}
			}

			State = 180; Match(T__3);
			State = 181; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CMatchParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CMatchParser.IDENTIFIER, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(IDENTIFIER);
			State = 188;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__13) {
				{
				{
				State = 184; Match(T__13);
				State = 185; Match(IDENTIFIER);
				}
				}
				State = 190;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(T__15);
			State = 193;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__8) | (1L << T__16) | (1L << INTEGER) | (1L << TOUPLE) | (1L << DOUBLE) | (1L << STRING) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 192; expression(0);
				}
			}

			State = 195; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentsizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParentsizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterParentsizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitParentsizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentsizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionalCallExpressionContext : ExpressionContext {
		public FunctionalCallContext functionalCall() {
			return GetRuleContext<FunctionalCallContext>(0);
		}
		public FunctionalCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterFunctionalCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitFunctionalCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CMatchParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOpContext compareOp() {
			return GetRuleContext<CompareOpContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementforExpressionContext : ExpressionContext {
		public StatementforContext statementfor() {
			return GetRuleContext<StatementforContext>(0);
		}
		public StatementforExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterStatementforExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitStatementforExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementforExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatmentmatchExpressionContext : ExpressionContext {
		public StatmentmatchContext statmentmatch() {
			return GetRuleContext<StatmentmatchContext>(0);
		}
		public StatmentmatchExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterStatmentmatchExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitStatmentmatchExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatmentmatchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementifExpressionContext : ExpressionContext {
		public StatementifContext statementif() {
			return GetRuleContext<StatementifContext>(0);
		}
		public StatementifExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterStatementifExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitStatementifExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementifExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 198; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 199; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new StatmentmatchExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 200; statmentmatch();
				}
				break;

			case 4:
				{
				_localctx = new StatementifExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 201; statementif();
				}
				break;

			case 5:
				{
				_localctx = new StatementforExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 202; statementfor();
				}
				break;

			case 6:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 203; functionCall();
				}
				break;

			case 7:
				{
				_localctx = new FunctionalCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 204; functionalCall();
				}
				break;

			case 8:
				{
				_localctx = new ParentsizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 205; Match(T__2);
				State = 206; expression(0);
				State = 207; Match(T__3);
				}
				break;

			case 9:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 209; Match(T__16);
				State = 210; expression(5);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 231;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 229;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 213;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 214; multOp();
						State = 215; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 217;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 218; addOp();
						State = 219; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 221;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 222; compareOp();
						State = 223; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 225;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 226; boolOp();
						State = 227; expression(2);
						}
						break;
					}
					} 
				}
				State = 233;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			_la = _input.La(1);
			if ( !(_la==T__20 || _la==T__21) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOpContext : ParserRuleContext {
		public CompareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterCompareOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitCompareOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOpContext compareOp() {
		CompareOpContext _localctx = new CompareOpContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_compareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public ITerminalNode BOOL_OP() { return GetToken(CMatchParser.BOOL_OP, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(BOOL_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(CMatchParser.INTEGER, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CMatchParser.DOUBLE, 0); }
		public ITerminalNode STRING() { return GetToken(CMatchParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(CMatchParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(CMatchParser.NULL, 0); }
		public ITerminalNode TOUPLE() { return GetToken(CMatchParser.TOUPLE, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << TOUPLE) | (1L << DOUBLE) | (1L << STRING) | (1L << BOOL) | (1L << NULL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(T__6);
			State = 248;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__5) | (1L << T__8) | (1L << T__14) | (1L << T__15) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 245; line();
				}
				}
				State = 250;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 251; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantPatternContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterConstantPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitConstantPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantPatternContext constantPattern() {
		ConstantPatternContext _localctx = new ConstantPatternContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_constantPattern);
		try {
			State = 258;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253; Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254; Match(T__29);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 3);
				{
				State = 255; Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 4);
				{
				State = 256; Match(T__31);
				}
				break;
			case INTEGER:
			case TOUPLE:
			case DOUBLE:
			case STRING:
			case BOOL:
			case NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 257; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalNumbersTailContext : ParserRuleContext {
		public ITerminalNode POSITIVE() { return GetToken(CMatchParser.POSITIVE, 0); }
		public DecimalNumbersTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalNumbersTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterDecimalNumbersTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitDecimalNumbersTail(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalNumbersTail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalNumbersTailContext decimalNumbersTail() {
		DecimalNumbersTailContext _localctx = new DecimalNumbersTailContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_decimalNumbersTail);
		try {
			State = 280;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__32:
			case T__33:
			case T__34:
			case T__35:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__32:
					{
					State = 260; Match(T__32);
					State = 261; Match(POSITIVE);
					}
					break;
				case T__33:
					{
					State = 262; Match(T__33);
					State = 263; Match(POSITIVE);
					}
					break;
				case T__34:
					{
					State = 264; Match(T__34);
					State = 265; Match(POSITIVE);
					}
					break;
				case T__35:
					{
					State = 266; Match(T__35);
					State = 267; Match(POSITIVE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__36:
			case T__37:
			case T__38:
			case T__39:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__36:
					{
					State = 270; Match(T__36);
					State = 271; Match(POSITIVE);
					}
					break;
				case T__37:
					{
					State = 272; Match(T__37);
					State = 273; Match(POSITIVE);
					}
					break;
				case T__38:
					{
					State = 274; Match(T__38);
					State = 275; Match(POSITIVE);
					}
					break;
				case T__39:
					{
					State = 276; Match(T__39);
					State = 277; Match(POSITIVE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalNumbersHeadContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(CMatchParser.INTEGER, 0); }
		public DecimalNumbersHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalNumbersHead; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterDecimalNumbersHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitDecimalNumbersHead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalNumbersHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalNumbersHeadContext decimalNumbersHead() {
		DecimalNumbersHeadContext _localctx = new DecimalNumbersHeadContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_decimalNumbersHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				State = 282; Match(INTEGER);
				State = 283; Match(T__40);
				}
				break;

			case 2:
				{
				State = 284; Match(INTEGER);
				State = 285; Match(T__41);
				}
				break;

			case 3:
				{
				State = 286; Match(INTEGER);
				State = 287; Match(T__42);
				}
				break;

			case 4:
				{
				State = 288; Match(INTEGER);
				State = 289; Match(T__43);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TouplePatternContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(CMatchParser.INTEGER, 0); }
		public ITerminalNode STRING() { return GetToken(CMatchParser.STRING, 0); }
		public TouplePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_touplePattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterTouplePattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitTouplePattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTouplePattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TouplePatternContext touplePattern() {
		TouplePatternContext _localctx = new TouplePatternContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_touplePattern);
		try {
			State = 312;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292; Match(T__2);
				State = 293; Match(T__44);
				State = 294; Match(T__13);
				State = 295; Match(INTEGER);
				State = 296; Match(T__3);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; Match(T__2);
				State = 298; Match(INTEGER);
				State = 299; Match(T__13);
				State = 300; Match(T__44);
				State = 301; Match(T__3);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 302; Match(T__2);
				State = 303; Match(T__44);
				State = 304; Match(T__13);
				State = 305; Match(STRING);
				State = 306; Match(T__3);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 307; Match(T__2);
				State = 308; Match(STRING);
				State = 309; Match(T__13);
				State = 310; Match(T__44);
				State = 311; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardPatternContext : ParserRuleContext {
		public WildcardPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.EnterWildcardPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICMatchListener typedListener = listener as ICMatchListener;
			if (typedListener != null) typedListener.ExitWildcardPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICMatchVisitor<TResult> typedVisitor = visitor as ICMatchVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardPatternContext wildcardPattern() {
		WildcardPatternContext _localctx = new WildcardPatternContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_wildcardPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3:\x13F\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x3\x2\a\x2>\n\x2\f\x2\xE"+
		"\x2\x41\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5"+
		"\x3L\n\x3\x3\x4\x3\x4\x5\x4P\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5[\n\x5\x3\x6\x3\x6\x5\x6_\n\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x6\by\n\b\r\b\xE\bz\x3\b\x3\b\x3\t"+
		"\x3\t\x5\t\x81\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x88\n\n\x3\v\x3\v\x3"+
		"\v\x5\v\x8D\n\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x98\n"+
		"\r\f\r\xE\r\x9B\v\r\x5\r\x9D\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5\xE\xA4"+
		"\n\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\a\xF\xAC\n\xF\f\xF\xE\xF\xAF"+
		"\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xB5\n\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\a\x11\xBD\n\x11\f\x11\xE\x11\xC0\v\x11\x3\x12\x3"+
		"\x12\x5\x12\xC4\n\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13"+
		"\xD6\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\xE8\n\x13"+
		"\f\x13\xE\x13\xEB\v\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17"+
		"\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\a\x19\xF9\n\x19\f\x19\xE\x19\xFC\v"+
		"\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x105\n\x1A"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x10F\n"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x119"+
		"\n\x1B\x5\x1B\x11B\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x5\x1C\x125\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x13B\n\x1D\x3\x1E\x3\x1E\x3\x1E\x2"+
		"\x2\x3$\x1F\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30"+
		"\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2\x2\x6\x3\x2\x14\x16\x3\x2\x17\x18"+
		"\x3\x2\x19\x1E\x3\x2\x32\x37\x157\x2?\x3\x2\x2\x2\x4K\x3\x2\x2\x2\x6O"+
		"\x3\x2\x2\x2\bS\x3\x2\x2\x2\n^\x3\x2\x2\x2\f`\x3\x2\x2\x2\xEl\x3\x2\x2"+
		"\x2\x10\x80\x3\x2\x2\x2\x12\x87\x3\x2\x2\x2\x14\x89\x3\x2\x2\x2\x16\x8E"+
		"\x3\x2\x2\x2\x18\x92\x3\x2\x2\x2\x1A\xA0\x3\x2\x2\x2\x1C\xA8\x3\x2\x2"+
		"\x2\x1E\xB0\x3\x2\x2\x2 \xB9\x3\x2\x2\x2\"\xC1\x3\x2\x2\x2$\xD5\x3\x2"+
		"\x2\x2&\xEC\x3\x2\x2\x2(\xEE\x3\x2\x2\x2*\xF0\x3\x2\x2\x2,\xF2\x3\x2\x2"+
		"\x2.\xF4\x3\x2\x2\x2\x30\xF6\x3\x2\x2\x2\x32\x104\x3\x2\x2\x2\x34\x11A"+
		"\x3\x2\x2\x2\x36\x124\x3\x2\x2\x2\x38\x13A\x3\x2\x2\x2:\x13C\x3\x2\x2"+
		"\x2<>\x5\x4\x3\x2=<\x3\x2\x2\x2>\x41\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2"+
		"\x2\x2@\x42\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42\x43\a\x2\x2\x3\x43\x3\x3"+
		"\x2\x2\x2\x44L\x5\x6\x4\x2\x45L\x5\b\x5\x2\x46L\x5\f\a\x2GL\x5\xE\b\x2"+
		"HL\x5\x1E\x10\x2IL\x5\x1A\xE\x2JL\x5\"\x12\x2K\x44\x3\x2\x2\x2K\x45\x3"+
		"\x2\x2\x2K\x46\x3\x2\x2\x2KG\x3\x2\x2\x2KH\x3\x2\x2\x2KI\x3\x2\x2\x2K"+
		"J\x3\x2\x2\x2L\x5\x3\x2\x2\x2MP\x5\x16\f\x2NP\x5\x18\r\x2OM\x3\x2\x2\x2"+
		"ON\x3\x2\x2\x2PQ\x3\x2\x2\x2QR\a\x3\x2\x2R\a\x3\x2\x2\x2ST\a\x4\x2\x2"+
		"TU\a\x5\x2\x2UV\x5$\x13\x2VW\a\x6\x2\x2WZ\x5\x30\x19\x2XY\a\a\x2\x2Y["+
		"\x5\n\x6\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[\t\x3\x2\x2\x2\\_\x5\x30\x19\x2"+
		"]_\x5\b\x5\x2^\\\x3\x2\x2\x2^]\x3\x2\x2\x2_\v\x3\x2\x2\x2`\x61\a\b\x2"+
		"\x2\x61\x62\a\x5\x2\x2\x62\x63\x5\x16\f\x2\x63\x64\a\x3\x2\x2\x64\x65"+
		"\x5$\x13\x2\x65\x66\a\x3\x2\x2\x66g\x5\x16\f\x2gh\a\x6\x2\x2hi\a\t\x2"+
		"\x2ij\x5\x30\x19\x2jk\a\n\x2\x2k\r\x3\x2\x2\x2lm\a\v\x2\x2mn\a\x5\x2\x2"+
		"no\x5\x10\t\x2op\a\x6\x2\x2px\a\t\x2\x2qr\a\f\x2\x2rs\x5\x14\v\x2st\a"+
		"\r\x2\x2tu\a\t\x2\x2uv\x5\x30\x19\x2vw\a\n\x2\x2wy\x3\x2\x2\x2xq\x3\x2"+
		"\x2\x2yz\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x3\x2\x2\x2|}\a\n\x2"+
		"\x2}\xF\x3\x2\x2\x2~\x81\x5.\x18\x2\x7F\x81\a:\x2\x2\x80~\x3\x2\x2\x2"+
		"\x80\x7F\x3\x2\x2\x2\x81\x11\x3\x2\x2\x2\x82\x88\x5\x36\x1C\x2\x83\x88"+
		"\x5\x34\x1B\x2\x84\x88\x5\x38\x1D\x2\x85\x88\x5\x32\x1A\x2\x86\x88\x5"+
		":\x1E\x2\x87\x82\x3\x2\x2\x2\x87\x83\x3\x2\x2\x2\x87\x84\x3\x2\x2\x2\x87"+
		"\x85\x3\x2\x2\x2\x87\x86\x3\x2\x2\x2\x88\x13\x3\x2\x2\x2\x89\x8C\x5\x12"+
		"\n\x2\x8A\x8B\a\xE\x2\x2\x8B\x8D\x5$\x13\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D"+
		"\x3\x2\x2\x2\x8D\x15\x3\x2\x2\x2\x8E\x8F\a:\x2\x2\x8F\x90\a\xF\x2\x2\x90"+
		"\x91\x5$\x13\x2\x91\x17\x3\x2\x2\x2\x92\x93\a:\x2\x2\x93\x9C\a\x5\x2\x2"+
		"\x94\x99\x5$\x13\x2\x95\x96\a\x10\x2\x2\x96\x98\x5$\x13\x2\x97\x95\x3"+
		"\x2\x2\x2\x98\x9B\x3\x2\x2\x2\x99\x97\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2"+
		"\x9A\x9D\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9C\x94\x3\x2\x2\x2\x9C\x9D\x3"+
		"\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9F\a\x6\x2\x2\x9F\x19\x3\x2\x2\x2\xA0"+
		"\xA1\a:\x2\x2\xA1\xA3\a\x5\x2\x2\xA2\xA4\x5\x1C\xF\x2\xA3\xA2\x3\x2\x2"+
		"\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA6\a\x6\x2\x2\xA6\xA7"+
		"\a\x3\x2\x2\xA7\x1B\x3\x2\x2\x2\xA8\xAD\x5$\x13\x2\xA9\xAA\a\x10\x2\x2"+
		"\xAA\xAC\x5$\x13\x2\xAB\xA9\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2\xAD\xAB\x3"+
		"\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\x1D\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2"+
		"\xB0\xB1\a\x11\x2\x2\xB1\xB2\a:\x2\x2\xB2\xB4\a\x5\x2\x2\xB3\xB5\x5 \x11"+
		"\x2\xB4\xB3\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB7"+
		"\a\x6\x2\x2\xB7\xB8\x5\x30\x19\x2\xB8\x1F\x3\x2\x2\x2\xB9\xBE\a:\x2\x2"+
		"\xBA\xBB\a\x10\x2\x2\xBB\xBD\a:\x2\x2\xBC\xBA\x3\x2\x2\x2\xBD\xC0\x3\x2"+
		"\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF!\x3\x2\x2\x2\xC0\xBE"+
		"\x3\x2\x2\x2\xC1\xC3\a\x12\x2\x2\xC2\xC4\x5$\x13\x2\xC3\xC2\x3\x2\x2\x2"+
		"\xC3\xC4\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC6\a\x3\x2\x2\xC6#\x3\x2"+
		"\x2\x2\xC7\xC8\b\x13\x1\x2\xC8\xD6\x5.\x18\x2\xC9\xD6\a:\x2\x2\xCA\xD6"+
		"\x5\xE\b\x2\xCB\xD6\x5\b\x5\x2\xCC\xD6\x5\f\a\x2\xCD\xD6\x5\x18\r\x2\xCE"+
		"\xD6\x5\x1A\xE\x2\xCF\xD0\a\x5\x2\x2\xD0\xD1\x5$\x13\x2\xD1\xD2\a\x6\x2"+
		"\x2\xD2\xD6\x3\x2\x2\x2\xD3\xD4\a\x13\x2\x2\xD4\xD6\x5$\x13\a\xD5\xC7"+
		"\x3\x2\x2\x2\xD5\xC9\x3\x2\x2\x2\xD5\xCA\x3\x2\x2\x2\xD5\xCB\x3\x2\x2"+
		"\x2\xD5\xCC\x3\x2\x2\x2\xD5\xCD\x3\x2\x2\x2\xD5\xCE\x3\x2\x2\x2\xD5\xCF"+
		"\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\xE9\x3\x2\x2\x2\xD7\xD8\f\x6\x2\x2"+
		"\xD8\xD9\x5&\x14\x2\xD9\xDA\x5$\x13\a\xDA\xE8\x3\x2\x2\x2\xDB\xDC\f\x5"+
		"\x2\x2\xDC\xDD\x5(\x15\x2\xDD\xDE\x5$\x13\x6\xDE\xE8\x3\x2\x2\x2\xDF\xE0"+
		"\f\x4\x2\x2\xE0\xE1\x5*\x16\x2\xE1\xE2\x5$\x13\x5\xE2\xE8\x3\x2\x2\x2"+
		"\xE3\xE4\f\x3\x2\x2\xE4\xE5\x5,\x17\x2\xE5\xE6\x5$\x13\x4\xE6\xE8\x3\x2"+
		"\x2\x2\xE7\xD7\x3\x2\x2\x2\xE7\xDB\x3\x2\x2\x2\xE7\xDF\x3\x2\x2\x2\xE7"+
		"\xE3\x3\x2\x2\x2\xE8\xEB\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9\xEA\x3\x2"+
		"\x2\x2\xEA%\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEC\xED\t\x2\x2\x2\xED\'\x3"+
		"\x2\x2\x2\xEE\xEF\t\x3\x2\x2\xEF)\x3\x2\x2\x2\xF0\xF1\t\x4\x2\x2\xF1+"+
		"\x3\x2\x2\x2\xF2\xF3\a\x31\x2\x2\xF3-\x3\x2\x2\x2\xF4\xF5\t\x5\x2\x2\xF5"+
		"/\x3\x2\x2\x2\xF6\xFA\a\t\x2\x2\xF7\xF9\x5\x4\x3\x2\xF8\xF7\x3\x2\x2\x2"+
		"\xF9\xFC\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB\xFD\x3"+
		"\x2\x2\x2\xFC\xFA\x3\x2\x2\x2\xFD\xFE\a\n\x2\x2\xFE\x31\x3\x2\x2\x2\xFF"+
		"\x105\a\x1F\x2\x2\x100\x105\a \x2\x2\x101\x105\a!\x2\x2\x102\x105\a\""+
		"\x2\x2\x103\x105\x5.\x18\x2\x104\xFF\x3\x2\x2\x2\x104\x100\x3\x2\x2\x2"+
		"\x104\x101\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x104\x103\x3\x2\x2\x2\x105"+
		"\x33\x3\x2\x2\x2\x106\x107\a#\x2\x2\x107\x10F\a\x38\x2\x2\x108\x109\a"+
		"$\x2\x2\x109\x10F\a\x38\x2\x2\x10A\x10B\a%\x2\x2\x10B\x10F\a\x38\x2\x2"+
		"\x10C\x10D\a&\x2\x2\x10D\x10F\a\x38\x2\x2\x10E\x106\x3\x2\x2\x2\x10E\x108"+
		"\x3\x2\x2\x2\x10E\x10A\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10F\x11B\x3"+
		"\x2\x2\x2\x110\x111\a\'\x2\x2\x111\x119\a\x38\x2\x2\x112\x113\a(\x2\x2"+
		"\x113\x119\a\x38\x2\x2\x114\x115\a)\x2\x2\x115\x119\a\x38\x2\x2\x116\x117"+
		"\a*\x2\x2\x117\x119\a\x38\x2\x2\x118\x110\x3\x2\x2\x2\x118\x112\x3\x2"+
		"\x2\x2\x118\x114\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x119\x11B\x3\x2\x2"+
		"\x2\x11A\x10E\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11B\x35\x3\x2\x2\x2\x11C"+
		"\x11D\a\x32\x2\x2\x11D\x125\a+\x2\x2\x11E\x11F\a\x32\x2\x2\x11F\x125\a"+
		",\x2\x2\x120\x121\a\x32\x2\x2\x121\x125\a-\x2\x2\x122\x123\a\x32\x2\x2"+
		"\x123\x125\a.\x2\x2\x124\x11C\x3\x2\x2\x2\x124\x11E\x3\x2\x2\x2\x124\x120"+
		"\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x125\x37\x3\x2\x2\x2\x126\x127\a\x5"+
		"\x2\x2\x127\x128\a/\x2\x2\x128\x129\a\x10\x2\x2\x129\x12A\a\x32\x2\x2"+
		"\x12A\x13B\a\x6\x2\x2\x12B\x12C\a\x5\x2\x2\x12C\x12D\a\x32\x2\x2\x12D"+
		"\x12E\a\x10\x2\x2\x12E\x12F\a/\x2\x2\x12F\x13B\a\x6\x2\x2\x130\x131\a"+
		"\x5\x2\x2\x131\x132\a/\x2\x2\x132\x133\a\x10\x2\x2\x133\x134\a\x35\x2"+
		"\x2\x134\x13B\a\x6\x2\x2\x135\x136\a\x5\x2\x2\x136\x137\a\x35\x2\x2\x137"+
		"\x138\a\x10\x2\x2\x138\x139\a/\x2\x2\x139\x13B\a\x6\x2\x2\x13A\x126\x3"+
		"\x2\x2\x2\x13A\x12B\x3\x2\x2\x2\x13A\x130\x3\x2\x2\x2\x13A\x135\x3\x2"+
		"\x2\x2\x13B\x39\x3\x2\x2\x2\x13C\x13D\a\x30\x2\x2\x13D;\x3\x2\x2\x2\x1C"+
		"?KOZ^z\x80\x87\x8C\x99\x9C\xA3\xAD\xB4\xBE\xC3\xD5\xE7\xE9\xFA\x104\x10E"+
		"\x118\x11A\x124\x13A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CMatch.Content
